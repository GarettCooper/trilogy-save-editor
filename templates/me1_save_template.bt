
// Bool
typedef struct {
	uint value: 1;
    uint : 31;
} bool <read=read_bool>;

string read_bool(bool &b) {
    if(b.value == 1)
        return "true";
    else
        return "false";
}

// String
typedef struct {
	int len <bgcolor=0x000077>;
    SetBackColor(0x000055 + len);

	// DÃ©tection utf8
	if (len < 0) {
		wchar_t chars[Abs(len)];
	}
	else {
		char chars[len];
	}
} String <read=read_string>;

string read_string(String &s) {
    if(exists(s.chars))
        return s.chars;
    else
        return "<empty>";
}

// Name
typedef struct {
	String str;
	FSkip(8);
} Name <read=read_name>;

string read_name(Name &n) {
    return read_string(n.str);
}

// Import
struct Import {
    uint index_package;
    FSkip(4);
    uint index_class;
    FSkip(4);
    uint index_link;
    uint index_object;
    FSkip(4);
};

// Export
struct Export {
    uint index_class_name;
    uint index_class_parent;
    uint index_link;
    uint index_object;
    uint index_value;
    uint index_archtype_name;
    uint64 flag;
    uint data_size;
    uint data_offset;
    FSkip(32);
};

// Data
struct Data {
    FSkip(4);
    uint name_index;
    FSkip(4);
    uint type_index;
    FSkip(4);
    uint size;

    local int i = 0;
    while (ReadInt64(FTell() + i) != 379) {
        i++;
    }
    FSkip(i);
    int none;
    int end;
};

// SaveGame
struct {
    FSeek(0x8);
	int header_offset <format=hex, bgcolor=0x00aa55>;
    FSeek(header_offset);
    struct {
        uint magic <format=hex>;
        uint16 low_version;
        uint16 high_version;
        uint data_offset <format=hex>;
        String upx_name;
        uint flags <format=hex>;
        uint names_len;
        uint names_offset <format=hex>;
        uint exports_len;
        uint exports_offset <format=hex>;
        uint imports_len;
        uint imports_offset <format=hex>;
        uint no_mans_land_offset <format=hex>;
        FSkip(16);
        uint generations <format=hex>;
        FSkip(36 + generations * 12);
        uint compression;
    } header <bgcolor=0x8855ff>;
    struct {
        FSeek(header.names_offset);
	    Name name[header.names_len] <optimize=false>;
    } names;
    struct {
        FSeek(header.imports_offset);
	    Import import[header.imports_len] <optimize=false>;
    } imports <bgcolor=0x88ff55>;
    struct {
        FSeek(header.exports_offset);
	    Export export[header.exports_len] <optimize=false>;
    } exports <bgcolor=0xff8855>;
    // No man's land
    FSeek(header.data_offset);
    struct {
        local int i;
        for (i = 0; i < header.exports_len; i++) {
            FSeek(exports.export[i].data_offset);
            Data data;
        }
    } datas <bgcolor=0x447799>;

} MassEffect1 <open=true>;
